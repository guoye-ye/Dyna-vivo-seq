#/usr/bin/env python
#coding=utf-8

import os
import sys
import argparse

parser = argparse.ArgumentParser(description='Extracting Digital Gene Expression (step2, generate a DGE txt file)(extract_cell_bc.py is needed): \
                                              python DGE2.py \
                                              -b bam_file \
                                              -m T / F \
                                              -f Y / N \
                                              -c cell_selection_num \
                                              -n num_cell_barcode \
                                              -sm SAMPLE_NAME \
                                              -D directory of output file' )

parser.add_argument('-b', '--bam_file', type=str, required=True, help='my_clean.bam generated by DGE1.py')
parser.add_argument('-m', '--mix', type=str, required=True, help='T/True: human+mouse; F/False: human/mouse')
parser.add_argument('-f', '--filter', type=str, default='', help='This is required when "mix = True". FilterBam finished or not')
parser.add_argument('-c', '--cell_selection', type=str, default='', help='This is required when "mix = True". How many cell barcodes you want to extract from out_cell_readcounts.txt to generate cell_bc_file.txt, which is used to extract human/mouse DGE.')
parser.add_argument('-n', '--num_cell_barcode', type=str, default='', help='This is required when "mix = False". NUM_CORE_BARCODES / how many cells you want to extract from your BAM? / The number of cell barcodes to the left of the inflection point in the Rplots.pdf generated by DGE1.py')
parser.add_argument('-sm', '--SAMPLE_NAME', type=str, required=True, help='Sample name to insert into the read group header Required.')
parser.add_argument('-D', '--DIRECTORY', default='./', help='The directory of output file')
args = parser.parse_args()

if (args.mix=='T') or (args.mix=='True'):
    if (args.filter == 'N'):
        os.system('''FilterBam INPUT={path}/{sample}_star_gene_exon_tagged_TagIntronic_clean.bam  OUTPUT={path}/{sample}_human.bam REF_SOFT_MATCHED_RETAINED=HUMAN'''.format(path=args.DIRECTORY, sample=args.SAMPLE_NAME))
        os.system('''FilterBam INPUT={path}/{sample}_star_gene_exon_tagged_TagIntronic_clean.bam  OUTPUT={path}/{sample}_mouse.bam REF_SOFT_MATCHED_RETAINED=MOUSE'''.format(path=args.DIRECTORY, sample=args.SAMPLE_NAME))
    os.system('''python /home/disk/lfh/pipeline/drop-seq/extract_cell_bc.py {path}/{sample}_out_cell_readcounts.txt {cell_selection} {path}/{sample}'''.format(path=args.DIRECTORY, sample=args.SAMPLE_NAME, cell_selection = args.cell_selection))

    os.system('''
    DigitalExpression I={path}/{sample}_human.bam O={path}/{sample}_human_gene_exon_tagged_{cell_selection}.dge.txt.gz \
    SUMMARY={path}/{sample}_human_gene_exon_tagged_{cell_selection}.dge.summary.txt \
    CELL_BC_FILE={path}/{sample}_cell_bc_file_{cell_selection}.txt TMP_DIR=tmp'''.format(path=args.DIRECTORY, sample=args.SAMPLE_NAME, cell_selection = args.cell_selection))
    os.system('''
    DigitalExpression I={path}/{sample}_mouse.bam O={path}/{sample}_mouse_gene_exon_tagged_{cell_selection}.dge.txt.gz \
    SUMMARY={path}/{sample}_mouse_gene_exon_tagged_{cell_selection}.dge.summary.txt \
    CELL_BC_FILE={path}/{sample}_cell_bc_file_{cell_selection}.txt TMP_DIR=tmp'''.format(path=args.DIRECTORY, sample=args.SAMPLE_NAME, cell_selection = args.cell_selection))
elif (args.mix=='F') or (args.mix=='False'):
    os.system('''
    DigitalExpression I={bam} O={path}/{sample}_out_gene_exon_tagged_{cell_selection}.dge.txt.gz \
    SUMMARY={path}/{sample}_out_gene_exon_tagged_{cell_selection}.dge.summary.txt \
    NUM_CORE_BARCODES={cell_selection} TMP_DIR={path}/tmp'''.format(bam=args.bam_file, path=args.DIRECTORY, sample=args.SAMPLE_NAME, cell_selection = args.cell_selection))

else:
    print('ERROR!')



